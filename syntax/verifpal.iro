// SPDX-FileCopyrightText: Â© 2019-2021 Nadim Kobeissi <nadim@symbolic.software>
// SPDX-License-Identifier: GPL-3.0-only

name                   = verifpal
file_extensions []     = vp;


styles [] {
   .default : style {
      color = white
      textmate_scope = markup
   }
   .variable : style {
      color = blue
      textmate_scope = variable
   }
   .comment : style {
      color                 = light_green
      italic                = true
      textmate_scope        = comment
   }
   .meta : style {
      color                 = pink
      bold                  = true
      textmate_scope        = entity.name.function
   }
   .keyword : style {
      color                 = cyan
      italic                = true
      textmate_scope        = markup.italic
   }
   .constant : style {
      color                 = gold
      textmate_scope        = keyword
   }
   .punctuation : style {
      color                 = red
      textmate_scope        = constant.character
   }
   .entity : style {
      color                 = brown
      bold                  = true
      textmate_scope        = string
   }
   .function : style {
      color                 = green
      textmate_scope        = support.function
   }
}

contexts [] {
   main : context {
      : inline_push {
         regex          \= (principal)
         styles []       = .meta;
         : pop {  
            regex       \= (\[)
            styles []    = .punctuation;
         }
         : pattern {
            regex      \= ([a-zA-Z0-9_]+)
            styles [] = .entity;
         }
         : include "main";
      }
	  : inline_push {
         regex          \= (phase)
         styles []       = .meta;
         : pop {  
            regex       \= (\[)
            styles []    = .punctuation;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (queries)
         styles []       = .meta;
         : pop {  
            regex       \= (\[)
            styles []    = .punctuation;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (precondition)
         styles []       = .meta;
         : pop {  
            regex       \= (\[)
            styles []    = .punctuation;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (attacker)
         styles []       = .meta;
         : pop {  
            regex       \= (\[)
            styles []    = .punctuation;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (\()
         styles []       = .punctuation;
         : pop {  
            regex       \= (\)\??)
            styles []    = .punctuation;
         }
         : pattern {
            regex          \= (PW_HASH|HASH|HKDF|AEAD_ENC|AEAD_DEC|ENC|DEC|ASSERT|CONCAT|SPLIT|MAC|SIGNVERIF|SIGN|PKE_ENC|PKE_DEC|SHAMIR_SPLIT|SHAMIR_JOIN|G|nil|_)
            styles []       = .function;
         }
         : pattern {
            regex      \= ([a-zA-Z0-9_]+)
            styles [] = .variable;
         }
         : include "main";
      }
      : pattern {
         regex          \= (\(|\)|\[|\]|\:|\,|\^|\=|(\-\>))
         styles []       = .punctuation;
      }
      : pattern {
         regex          \= (confidentiality\?|authentication\?|freshness\?|unlinkability\?)
         styles []       = .keyword;
      }
      : pattern {
         regex          \= (UNBLIND|BLIND|RINGSIGNVERIF|RINGSIGN|PW_HASH|HASH|HKDF|AEAD_ENC|AEAD_DEC|ENC|DEC|ASSERT|CONCAT|SPLIT|MAC|SIGNVERIF|SIGN|PKE_ENC|PKE_DEC|SHAMIR_SPLIT|SHAMIR_JOIN|G|nil|_)
         styles []       = .function;
      }
      : inline_push {
         regex          \= ((generates|knows|leaks)\s)
         styles []       = .keyword;
         : pop {  
            regex       \= (\s)
            styles []    = .default;
         }
         : pattern {
            regex          \= ((public)|(private)|(password))
            styles []       = .constant;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (((confidentiality)|(authentication)|(freshness)|(unlinkability))\?)
         styles []       = .keyword;
         : pop {  
            regex       \= (\s\-\>\s)
            styles []    = .punctuation;
         }
         : pattern {
            regex          \= (\s[a-zA-Z0-9_]+)
            styles []       = .entity;
         }
         : include "main";
      }
      : inline_push {
         regex          \= (^[a-zA-Z0-9_]+)
         styles []       = .entity;
         : pop {  
            regex       \= ([a-zA-Z0-9_]+)
            styles []    = .entity;
         }
         : pattern {
            regex          \= (\s\-\>\s)
            styles []       = .punctuation;
         }
         : include "main";
      }
      : pattern {
         regex          \= (//.*)
         styles []       = .comment;
      }
   }
}
